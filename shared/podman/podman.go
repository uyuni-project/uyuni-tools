package podman

import (
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/uyuni-project/uyuni-tools/shared/utils"
)

const commonArgs = "--name %s --rm --cap-add NET_RAW --tmpfs /run -v cgroup:/sys/fs/cgroup:rw"

func GetCommonParams(containerName string) []string {
	return strings.Split(fmt.Sprintf(commonArgs, containerName), " ")
}

func GetExposedPorts() []string {
	return []string{"443", "80", "4505", "4506", "69", "25151", "5432", "9100", "9187", "9800"}
}

const ServicePath = "/usr/lib/systemd/system/uyuni-server.service"

func GenerateSystemdService(tz string, image string, podmanArgs []string, verbose bool) {

	_, err := os.Stat(ServicePath)
	if err == nil {
		log.Fatalln("uyuni-server service already present, not overwriting")
	} else if !os.IsNotExist(err) {
		log.Fatalf("Failed to stat %s file: %s\n", ServicePath, err)
	}

	file, err := os.OpenFile(ServicePath, os.O_WRONLY|os.O_CREATE, 0555)
	if err != nil {
		log.Fatalf("Fail to open uyuni-server.service file: %s\n", err)
	}
	defer file.Close()

	const serviceTemplate = `# uyuni-server.service, generated by uyuniadm
# Use an uyuni-server.service.d/local.conf file to override

[Unit]
Description=Uyuni server image container service
Wants=network.target
After=network-online.target
RequiresMountsFor=%t/containers

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Environment=UYUNI_IMAGE={{ .Image }}
Environment=TZ={{ .Timezone }}
Restart=on-failure
ExecStartPre=/bin/rm -f %t/uyuni-server.pid %t/%n.ctr-id
ExecStart=/usr/bin/podman run \
	--conmon-pidfile %t/uyuni-server.pid \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--sdnotify=conmon \
	-d \
	{{ .Args }} \
	{{- range .Ports }}
	-p {{ . }}:{{ . }} \
	{{- end }}
	{{- range $name, $path := .Volumes }}
	-v {{ $name }}:{{ $path }} \
	{{- end }}
	-e TZ=${TZ} \
	${UYUNI_IMAGE}
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id

PIDFile=%t/uyuni-server.pid
TimeoutStopSec=180
TimeoutStartSec=900
Type=forking

[Install]
WantedBy=multi-user.target default.target
`

	model := struct {
		Volumes  map[string]string
		Args     string
		Ports    []string
		Timezone string
		Image    string
	}{

		Volumes:  utils.VOLUMES,
		Args:     fmt.Sprintf(commonArgs, "uyuni-server") + " " + strings.Join(podmanArgs, " "),
		Ports:    GetExposedPorts(),
		Timezone: tz,
		Image:    image,
	}

	t := template.Must(template.New("service").Parse(serviceTemplate))
	if err = t.Execute(file, model); err != nil {
		log.Fatalf("Failed to generate systemd service unit file: %s\n", err)
	}

	utils.RunCmd("systemctl", []string{"daemon-reload"}, "Failed to reload systemd daemon", verbose)
}
