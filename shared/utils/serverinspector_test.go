// SPDX-FileCopyrightText: 2024 SUSE LLC
//
// SPDX-License-Identifier: Apache-2.0

package utils

import (
	"path"
	"testing"

	"github.com/uyuni-project/uyuni-tools/shared/test_utils"
)

func TestServerInspectorGenerate(t *testing.T) {
	testDir, cleaner := test_utils.CreateTmpFolder(t)
	defer cleaner()

	inspector := NewServerInspector(testDir)
	if err := inspector.GenerateScript(); err != nil {
		t.Errorf("Unexpected error %s", err)
	}

	dataPath := inspector.GetDataPath()

	expected := `#!/bin/bash
# inspect.sh, generated by mgradm
echo "uyuni_release=$(cat /etc/*release | grep 'Uyuni release' | cut -d ' ' -f3 || true)" >> ` + dataPath + `
echo "suse_manager_release=$(cat /etc/*release | grep 'SUSE Manager release' | cut -d ' ' -f4 || true)" >> ` + dataPath + `
echo "fqdn=$(cat /etc/rhn/rhn.conf 2>/dev/null | grep 'java.hostname' | cut -d' ' -f3 || true)" >> ` + dataPath + `
echo "image_pg_version=$(rpm -qa --qf '%{VERSION}\n' 'name=postgresql[0-8][0-9]-server'  | cut -d. -f1 | sort -n | tail -1 || true)" >> ` + dataPath + `
echo "current_pg_version=$((test -e /var/lib/pgsql/data/PG_VERSION && cat /var/lib/pgsql/data/PG_VERSION) || true)" >> ` + dataPath + `
echo "db_user=$(cat /etc/rhn/rhn.conf 2>/dev/null | grep '^db_user' | cut -d' ' -f3 || true)" >> ` + dataPath + `
echo "db_password=$(cat /etc/rhn/rhn.conf 2>/dev/null | grep '^db_password' | cut -d' ' -f3 || true)" >> ` + dataPath + `
echo "db_name=$(cat /etc/rhn/rhn.conf 2>/dev/null | grep '^db_name' | cut -d' ' -f3 || true)" >> ` + dataPath + `
echo "db_port=$(cat /etc/rhn/rhn.conf 2>/dev/null | grep '^db_port' | cut -d' ' -f3 || true)" >> ` + dataPath + `
exit 0
`

	actual := test_utils.ReadFile(t, path.Join(testDir, InspectScriptFilename))
	test_utils.AssertEquals(t, "Wrongly generated script", expected, actual)
}

func TestServerInspectorParse(t *testing.T) {
	testDir, cleaner := test_utils.CreateTmpFolder(t)
	defer cleaner()

	inspector := NewServerInspector(testDir)

	content := `
uyuni_release=2024.5
suse_manager_release=5.0
fqdn=my.server.name
image_pg_version=16
current_pg_version=14
db_user=myuser
db_password=mysecret
db_name=mydb
db_port=1234
`
	test_utils.WriteFile(t, inspector.GetDataPath(), content)

	actual, err := inspector.ReadInspectData()
	if err != nil {
		t.Fatalf("Unexpected error: %s", err)
	}

	test_utils.AssertEquals(t, "Invalid uyuni release", "2024.5", actual.UyuniRelease)
	test_utils.AssertEquals(t, "Invalid SUSE Manager release", "5.0", actual.SuseManagerRelease)
	test_utils.AssertEquals(t, "Invalid FQDN", "my.server.name", actual.Fqdn)
	test_utils.AssertEquals(t, "Invalid current postgresql version", "14", actual.CurrentPgVersion)
	test_utils.AssertEquals(t, "Invalid image postgresql version", "16", actual.ImagePgVersion)
	test_utils.AssertEquals(t, "Invalid DB user", "myuser", actual.DbUser)
	test_utils.AssertEquals(t, "Invalid DB password", "mysecret", actual.DbPassword)
	test_utils.AssertEquals(t, "Invalid DB name", "mydb", actual.DbName)
	test_utils.AssertEquals(t, "Invalid DB port", 1234, actual.DbPort)
}
